{"version":3,"sources":["geolocation.js","map.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrfile":"activity.js","sourcesContent":["\"use strict\";\n\nfunction getLocation(callback, watch, handleError) {\n    if ( typeof handleError !== 'function' ) {\n        function handleError(error) {\n            if ( console && console.error && typeof console.error === 'function' ) {\n                console.error('Geolocation error', error);\n            }\n        }\n    }\n\n    if ( navigator.geolocation ) {\n        if ( watch === true ) {\n            navigator.geolocation.watchPosition(callback, handleError);\n        } else {\n            navigator.geolocation.getCurrentPosition(callback, handleError);\n        }\n    } else {\n        throw 'Geolocation is unavailable!';\n    }\n}\n","\"use strict\";\n\nfunction GameControls(controlDiv, map, playerMarker) {\n    var controlUI = document.createElement('div');\n    controlUI.style.backgroundColor = '#fff';\n    controlUI.style.border = '2px solid #fff';\n    controlUI.style.borderRadius = '3px';\n    controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';\n    controlUI.style.cursor = 'pointer';\n    controlUI.style.marginBottom = '22px';\n    controlUI.style.textAlign = 'center';\n    controlDiv.appendChild(controlUI);\n\n    var navigationControlItem = document.createElement('i');\n    navigationControlItem.style.fontSize = '24px';\n    navigationControlItem.style.color = 'rgb(169,169,169)';\n    navigationControlItem.className = 'mdi mdi-navigation';\n    navigationControlItem.style.marginRight = '5px';\n    navigationControlItem.title = 'Enable or disable position tracking';\n    controlUI.appendChild(navigationControlItem);\n\n    navigationControlItem.addEventListener('click', function() {\n        if ( map.szTrackingEnabled ) {\n            map.szTrackingEnabled = false;\n            navigationControlItem.style.color = 'rgb(169,169,169)';\n        } else {\n            map.szTrackingEnabled = true;\n            navigationControlItem.style.color = 'rgb(0,0,255)';\n        }\n    });\n\n    var currentPositionControlIcon = document.createElement('i');\n    currentPositionControlIcon.style.fontSize = '24px';\n    currentPositionControlIcon.style.color = 'rgb(25,25,25)';\n    currentPositionControlIcon.className = 'mdi mdi-target';\n    currentPositionControlIcon.style.marginRight = '5px';\n    currentPositionControlIcon.title = 'Center map to current position';\n    controlUI.appendChild(currentPositionControlIcon);\n\n    currentPositionControlIcon.addEventListener('click', function() {\n        google.maps.event.trigger(playerMarker, 'click');\n        map.setCenter(playerMarker.getPosition());\n    });\n\n    var exitControlIcon = document.createElement('i');\n    exitControlIcon.style.fontSize = '24px';\n    exitControlIcon.style.color = 'rgb(25,25,25)';\n    exitControlIcon.className = 'mdi mdi-exit-to-app';\n    exitControlIcon.title = 'Exit the game';\n    controlUI.appendChild(exitControlIcon);\n\n    exitControlIcon.addEventListener('click', function() {\n        var confirmation = confirm('Are you sure you want to exit the game?');\n\n        if ( confirmation ) {\n            window.location = window.SmartZoos.config.base_url;\n        }\n    });\n}\n\nfunction initMap() {\n    function isInfoWindowOpen(infoWindow) {\n        if ( infoWindow && infoWindow.getMap() ) {\n            return true;\n        }\n\n        return false;\n    }\n    function closeInfoWindow(infoWindow) {\n        if (isInfoWindowOpen(infoWindow)) {\n            infoWindow.close();\n        }\n    }\n    function initPlayerMarker(position, infoWindow, map) {\n        var circle = {\n            path: google.maps.SymbolPath.CIRCLE,\n            fillColor: 'red',\n            fillOpacity: 1.0,\n            scale: 4.5,\n            strokeColor: 'white',\n            strokeWeight: 1\n        };\n\n        var playerMarker = new google.maps.Marker({\n            title: 'It\\'s You!',\n            position: {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n            },\n            map: map,\n            icon: circle\n        });\n\n        playerMarker.addListener('click', function() {\n            closeInfoWindow(infoWindow);\n            infoWindow.setContent(this.title);\n            infoWindow.open(map, this);\n        });\n\n        return playerMarker;\n    }\n    function initGameControls(playerMarker, map) {\n        var gameControlsDiv = document.createElement('div');\n        var gameControls = new GameControls(gameControlsDiv, map, playerMarker);\n\n        gameControls.index = 1;\n        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(gameControlsDiv);\n    }\n\n    function getClosestMarker(markers, playerLatLng) {\n        var closestDistance;\n        var closestIndex;\n        for (var i=0; i<markers.length;i++) {\n            var currentDistance = google.maps.geometry.spherical.computeDistanceBetween(playerLatLng, markers[i].getPosition());\n            if ( closestDistance ) {\n                if ( closestDistance > currentDistance ) {\n                    closestDistance = currentDistance;\n                    closestIndex = i;\n                }\n            } else {\n                closestDistance = currentDistance;\n                closestIndex = i;\n            }\n        }\n\n        return markers[closestIndex];\n    }\n\n    function detectAndActivateClosestMarker(currentPosition, markers, currentClosestMarker) {\n        var newClosestMarker = getClosestMarker(markers, currentPosition);\n\n        if ( closestMarker && closestMarker !== newClosestMarker ) {\n            closestMarker.setIcon(null);\n            //google.maps.event.trigger(newClosestMarker, 'click');\n        }\n\n        //google.maps.event.trigger(newClosestMarker, 'click');\n\n        closestMarker = newClosestMarker;\n\n        closestMarker.setIcon({\n            labelOrigin: new google.maps.Point(11, 12),\n            url: window.SmartZoos.config.map.green_dotless_icon_url\n        });\n    }\n\n    var mapOptions, map, playerMarker, infoWindow;\n    var markers = [];\n    var lines = [];\n    var closestMarker;\n\n    infoWindow = new google.maps.InfoWindow();\n\n    getLocation(function(position) {\n        // TODO Consider if CSS animation would do\n        // This is the only code piece using jQuery\n        $('#overlay').fadeOut();\n        mapOptions = {\n            center: {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n            },\n            zoom: 18,\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\n            disableDefaultUI: true,\n            disableDoubleClickZoom: true,\n            styles: [\n                {\n                    featureType: 'poi',\n                    stylers: [{visibility: 'off'}]\n                },\n                {\n                    featureType: 'transit.station',\n                    stylers: [{visibility: 'off'}]\n              },\n            ]\n        };\n\n        map = new google.maps.Map(document.getElementById('map'), mapOptions);\n\n        playerMarker = initPlayerMarker(position, infoWindow, map);\n        google.maps.event.trigger(playerMarker, 'click');\n\n        initGameControls(playerMarker, map);\n\n        getLocation(function(position) {\n            playerMarker.setPosition({\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n            });\n            if ( map.szTrackingEnabled === true ) {\n                map.setCenter(playerMarker.getPosition());\n            }\n            if ( markers.length > 0 ) {\n                detectAndActivateClosestMarker(playerMarker.getPosition(), markers, closestMarker);\n            }\n        }, true);\n\n        google.maps.event.addListener(map, 'dblclick', function(ev) {\n            var marker = new google.maps.Marker({\n                title: 'Marker ' + (markers.length + 1),\n                label: (markers.length + 1).toString(),\n                position: ev.latLng,\n                map: map,\n                animation: google.maps.Animation.DROP\n            });\n            markers.push(marker);\n\n            marker.addListener('click', function() {\n                closeInfoWindow(infoWindow);\n                infoWindow.setContent(this.title);\n                infoWindow.open(map, this);\n            });\n\n            if ( markers.length > 1 ) {\n                var line = new google.maps.Polyline({\n                    path: [\n                        markers[markers.length-2].getPosition(),\n                        markers[markers.length-1].getPosition()\n                    ],\n                    strokeWeight: 2,\n                    strokeOpacity: 0.5,\n                    icons: [{\n                        icon: {path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW},\n                        offset: '100%'\n                    }],\n                    geodesic: true,\n                    map: map\n                });\n            }\n\n            detectAndActivateClosestMarker(playerMarker.getPosition(), markers, closestMarker);\n        });\n    }, false, function(error) {\n        document.getElementById('overlay').childNodes[1].innerHTML = 'ERROR: ' + error.message;\n        document.getElementById('overlay').childNodes[1].style.color = '#8B0000';\n    });\n}\n"]}